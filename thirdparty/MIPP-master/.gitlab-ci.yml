variables:
  GIT_SUBMODULE_STRATEGY: none

stages:
  # - analysis
  - build
  - test
  - coverage
  - deploy

before_script:
  - hostname
  - whoami
# - pwd

# analysis-cppcheck:
#   image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_cppcheck:v1.9
#   stage: analysis
#   allow_failure: false
#   artifacts:
#     name: analysis-cppcheck-logs
#     when: always
#     paths:
#       - cppcheck/
#   tags:
#     - x86_64
#     - linux
#     - docker
#   script:
#     - ./ci/analysis-cppcheck.sh

# ---------------------------------------------------------------------------------------------------------------------
# LINUX X86 -----------------------------------------------------------------------------------------------------------

# BUILDS --------------------------------------------------------------------------------------------------------------

build-linux-x86-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
  stage: build
  needs: []
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_x86_gcc_nointr/bin/run-tests
      - ./build_linux_x86_gcc_sse2/bin/run-tests
      - ./build_linux_x86_gcc_sse3/bin/run-tests
      - ./build_linux_x86_gcc_ssse3/bin/run-tests
      - ./build_linux_x86_gcc_sse4_1/bin/run-tests
      - ./build_linux_x86_gcc_sse4_2/bin/run-tests
      - ./build_linux_x86_gcc_avx/bin/run-tests
      - ./build_linux_x86_gcc_avx2/bin/run-tests
      - ./build_linux_x86_gcc_avx2_bmi2/bin/run-tests
      - ./build_linux_x86_gcc_avx2_bmi2_fma/bin/run-tests
      - ./build_linux_x86_gcc_avx512f/bin/run-tests
      - ./build_linux_x86_gcc_avx512bw/bin/run-tests
      - ./build_linux_x86_gcc_avx512vbmi2/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-x86-gcc.sh

build-linux-x86-clang:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  stage: build
  needs: []
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_x86_clang_nointr/bin/run-tests
      - ./build_linux_x86_clang_sse2/bin/run-tests
      - ./build_linux_x86_clang_sse3/bin/run-tests
      - ./build_linux_x86_clang_ssse3/bin/run-tests
      - ./build_linux_x86_clang_sse4_1/bin/run-tests
      - ./build_linux_x86_clang_sse4_2/bin/run-tests
      - ./build_linux_x86_clang_avx/bin/run-tests
      - ./build_linux_x86_clang_avx2/bin/run-tests
      - ./build_linux_x86_clang_avx2_bmi2/bin/run-tests
      - ./build_linux_x86_clang_avx2_bmi2_fma/bin/run-tests
      - ./build_linux_x86_clang_avx512f/bin/run-tests
      - ./build_linux_x86_clang_avx512bw/bin/run-tests
      - ./build_linux_x86_clang_avx512vbmi2/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-x86-clang.sh

build-linux-x86-icpc:
  image: intel/oneapi-hpckit:2022.2-devel-ubuntu20.04
  stage: build
  needs: []
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_x86_icpc_nointr/bin/run-tests
      - ./build_linux_x86_icpc_sse2/bin/run-tests
      - ./build_linux_x86_icpc_sse3/bin/run-tests
      - ./build_linux_x86_icpc_ssse3/bin/run-tests
      - ./build_linux_x86_icpc_sse4_1/bin/run-tests
      - ./build_linux_x86_icpc_sse4_2/bin/run-tests
      - ./build_linux_x86_icpc_avx/bin/run-tests
      - ./build_linux_x86_icpc_avx2_fma/bin/run-tests
      - ./build_linux_x86_icpc_avx512f/bin/run-tests
      - ./build_linux_x86_icpc_avx512bw/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-x86-icpc.sh

# TESTS ---------------------------------------------------------------------------------------------------------------

test-linux-x86-unit-nointr:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_nointr build_linux_x86_clang_nointr build_linux_x86_icpc_nointr

test-linux-x86-unit-sse2:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - sse2
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_sse2 build_linux_x86_clang_sse2 build_linux_x86_icpc_sse2

test-linux-x86-unit-sse3:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - sse3
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_sse3 build_linux_x86_clang_sse3 build_linux_x86_icpc_sse3

test-linux-x86-unit-ssse3:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - ssse3
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_ssse3 build_linux_x86_clang_ssse3 build_linux_x86_icpc_ssse3

test-linux-x86-unit-sse4_1:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - sse4.1
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_sse4_1 build_linux_x86_clang_sse4_1 build_linux_x86_icpc_sse4_1

test-linux-x86-unit-sse4_2:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_sse4_2 build_linux_x86_clang_sse4_2 build_linux_x86_icpc_sse4_2

test-linux-x86-unit-avx:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - avx
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_avx build_linux_x86_clang_avx build_linux_x86_icpc_avx

test-linux-x86-unit-avx2:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - avx2
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_avx2 build_linux_x86_clang_avx2

test-linux-x86-unit-avx2-bmi2:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - avx2
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_avx2_bmi2 build_linux_x86_clang_avx2_bmi2

test-linux-x86-unit-avx2-bmi2-fma:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
    - avx2
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_x86_gcc_avx2_bmi2_fma build_linux_x86_clang_avx2_bmi2_fma build_linux_x86_icpc_avx2_fma

test-linux-x86-unit-avx512f:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
#   - avx512f
    - linux
    - docker
  script:
    - export INTEL_SDE_ARCH="-skx" # Skylake server architecture
    - ./ci/test-linux-intel-sde-unit.sh build_linux_x86_gcc_avx512f build_linux_x86_clang_avx512f build_linux_x86_icpc_avx512f

test-linux-x86-unit-avx512bw:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
#   - avx512bw
    - linux
    - docker
  script:
    - export INTEL_SDE_ARCH="-skx" # Skylake server architecture
    - ./ci/test-linux-intel-sde-unit.sh build_linux_x86_gcc_avx512bw build_linux_x86_clang_avx512bw build_linux_x86_icpc_avx512bw

test-linux-x86-unit-avx512vbmi2:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-x86-gcc
      artifacts: true
    - job: build-linux-x86-clang
      artifacts: true
    - job: build-linux-x86-icpc
      artifacts: true
  tags:
    - x86_64
#   - avx512vbmi2
    - linux
    - docker
  script:
    - export INTEL_SDE_ARCH="-spr" # Sapphire Rapids architecture
    - ./ci/test-linux-intel-sde-unit.sh build_linux_x86_gcc_avx512vbmi2 build_linux_x86_clang_avx512vbmi2

# ---------------------------------------------------------------------------------------------------------------------
# MACOSX X86 ----------------------------------------------------------------------------------------------------------

# BUILDS --------------------------------------------------------------------------------------------------------------

# build-macos-x86-clang:
#   stage: build
#   needs: []
#   tags:
#     - x86_64
#     - macos
#   artifacts:
#     paths:
#       - ./build_macos_x86_clang_nointr/bin/run-tests
#       - ./build_macos_x86_clang_sse2/bin/run-tests
#       - ./build_macos_x86_clang_sse3/bin/run-tests
#       - ./build_macos_x86_clang_ssse3/bin/run-tests
#       - ./build_macos_x86_clang_sse4_1/bin/run-tests
#       - ./build_macos_x86_clang_sse4_2/bin/run-tests
#       - ./build_macos_x86_clang_avx/bin/run-tests
#       - ./build_macos_x86_clang_avx2/bin/run-tests
#       - ./build_macos_x86_clang_avx2_fma/bin/run-tests
#   script:
#     - source ./ci/tools/threads.sh
#     - ./ci/build-macos-x86-clang.sh

# # TESTS ---------------------------------------------------------------------------------------------------------------

# test-macos-x86-unit-nointr:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#      - x86_64
#      - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_nointr

# test-macos-x86-unit-sse2:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - sse2
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_sse2

# test-macos-x86-unit-sse3:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - sse3
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_sse3

# test-macos-x86-unit-ssse3:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - ssse3
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_ssse3

# test-macos-x86-unit-sse4_1:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - sse4.1
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_sse4_1

# test-macos-x86-unit-sse4_2:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - sse4.2
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_sse4_2

# test-macos-x86-unit-avx:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - avx
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_avx

# test-macos-x86-unit-avx2:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - avx2
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_avx2

# test-macos-x86-unit-avx2-fma:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - avx2
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_avx2_fma

# test-macos-x86-unit-avx512f:
#   stage: test
#   needs:
#     - job: build-macos-x86-clang
#       artifacts: true
#   tags:
#     - x86_64
#     - avx512f
#     - macos
#   script:
#     - ./ci/test-linux-macos-unit.sh build_macos_x86_clang_avx512f

# ---------------------------------------------------------------------------------------------------------------------
# LINUX ARM -----------------------------------------------------------------------------------------------------------

# BUILDS --------------------------------------------------------------------------------------------------------------

build-linux-armv7-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/armhf_ubuntu_gcc:v9.3.0
  stage: build
  needs: []
  tags:
    - armhf
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_armv7_gcc_nointr/bin/run-tests
      - ./build_linux_armv7_gcc_neon/bin/run-tests
      - ./build_linux_armv7_gcc_neon_fma/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-armv7-gcc.sh

build-linux-armv7-clang:
  image: registry.gitlab.com/aff3ct/aff3ct/armhf_ubuntu_clang:v10.0.0
  stage: build
  needs: []
  tags:
    - armhf
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_armv7_clang_nointr/bin/run-tests
      - ./build_linux_armv7_clang_neon/bin/run-tests
      - ./build_linux_armv7_clang_neon_fma/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-armv7-clang.sh

build-linux-armv8-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_armie:v22.0
  stage: build
  needs: []
  tags:
    - arm64
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_armv8_gcc_nointr/bin/run-tests
      - ./build_linux_armv8_gcc_neon/bin/run-tests
      - ./build_linux_armv8_gcc_sve_ls128/bin/run-tests
      - ./build_linux_armv8_gcc_sve_ls256/bin/run-tests
      - ./build_linux_armv8_gcc_sve_ls512/bin/run-tests
      - ./build_linux_armv8_gcc_sve_ls1024/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-armv8-gcc.sh

build-linux-armv8-clang:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_clang:v10.0.0
  stage: build
  needs: []
  tags:
    - arm64
    - linux
    - docker
  artifacts:
    paths:
      - ./build_linux_armv8_clang_nointr/bin/run-tests
      - ./build_linux_armv8_clang_neon/bin/run-tests
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-armv8-clang.sh

# TESTS ---------------------------------------------------------------------------------------------------------------

test-linux-armv7-unit-nointr:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-armv7-gcc
      artifacts: true
    - job: build-linux-armv7-clang
      artifacts: true
  tags:
    - armhf
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv7_gcc_nointr build_linux_armv7_clang_nointr

test-linux-armv7-unit-neon:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-armv7-gcc
      artifacts: true
    - job: build-linux-armv7-clang
      artifacts: true
  tags:
    - armhf
    - neon
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv7_gcc_neon build_linux_armv7_clang_neon

test-linux-armv7-unit-neon-fma:
  image: ubuntu:20.04
  stage: test
  needs:
    - job: build-linux-armv7-gcc
      artifacts: true
    - job: build-linux-armv7-clang
      artifacts: true
  tags:
    - armhf
    - neon
    - fma
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv7_gcc_neon_fma build_linux_armv7_clang_neon_fma

test-linux-armv8-unit-nointr:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_armie:v22.0
  stage: test
  needs:
    - job: build-linux-armv8-gcc
      artifacts: true
    - job: build-linux-armv8-clang
      artifacts: true
  tags:
    - arm64
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv8_gcc_nointr build_linux_armv8_clang_nointr

test-linux-armv8-unit-neon:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_armie:v22.0
  stage: test
  needs:
    - job: build-linux-armv8-gcc
      artifacts: true
    - job: build-linux-armv8-clang
      artifacts: true
  tags:
    - arm64
    - neon
    - fma
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv8_gcc_neon build_linux_armv8_clang_neon

test-linux-armv8-unit-sve:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_armie:v22.0
  stage: test
  allow_failure: true
  needs:
    - job: build-linux-armv8-gcc
      artifacts: true
  tags:
    - arm64
    - armie
    - linux
    - docker
  script:
    - ./ci/test-linux-macos-unit.sh build_linux_armv8_gcc_sve_ls128 build_linux_armv8_gcc_sve_ls256 build_linux_armv8_gcc_sve_ls512 build_linux_armv8_gcc_sve_ls1024

# ---------------------------------------------------------------------------------------------------------------------
# WINDOWS X86 ---------------------------------------------------------------------------------------------------------

# BUILDS --------------------------------------------------------------------------------------------------------------

build-windows-x86-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_windows_gcc:v8.1.0
  stage: build
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs: []
  tags:
    - x86_64
    - windows
  artifacts:
    paths:
      - ./build_windows_x86_gcc_nointr/bin/run-tests.exe
      - ./build_windows_x86_gcc_sse2/bin/run-tests.exe
      - ./build_windows_x86_gcc_sse3/bin/run-tests.exe
      - ./build_windows_x86_gcc_ssse3/bin/run-tests.exe
      - ./build_windows_x86_gcc_sse4_1/bin/run-tests.exe
      - ./build_windows_x86_gcc_sse4_2/bin/run-tests.exe
      - ./build_windows_x86_gcc_avx/bin/run-tests.exe
      - ./build_windows_x86_gcc_avx2/bin/run-tests.exe
      - ./build_windows_x86_gcc_avx2_fma/bin/run-tests.exe
      # - ./build_windows_x86_gcc_avx512f/bin/run-tests.exe
  script:
    - ./ci/build-windows-x86-gcc.bat

build-windows-x86-msvc:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_windows_msvc:v15
  stage: build
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs: []
  tags:
    - x86_64
    - windows
  artifacts:
    paths:
      - ./build_windows_x86_msvc_nointr/bin/run-tests.exe
      - ./build_windows_x86_msvc_sse2/bin/run-tests.exe
      - ./build_windows_x86_msvc_sse3/bin/run-tests.exe
      - ./build_windows_x86_msvc_ssse3/bin/run-tests.exe
      - ./build_windows_x86_msvc_sse4_1/bin/run-tests.exe
      - ./build_windows_x86_msvc_sse4_2/bin/run-tests.exe
      - ./build_windows_x86_msvc_avx/bin/run-tests.exe
      - ./build_windows_x86_msvc_avx2/bin/run-tests.exe
      - ./build_windows_x86_msvc_avx2_fma/bin/run-tests.exe
      # - ./build_windows_x86_msvc_avx512f/bin/run-tests.exe
  script:
    - ./ci/build-windows-x86-msvc.bat

# TESTS ---------------------------------------------------------------------------------------------------------------

test-windows-x86-unit-nointr:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
     - x86_64
     - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_nointr build_windows_x86_gcc_nointr

test-windows-x86-unit-sse2:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - sse2
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_sse2 build_windows_x86_gcc_sse2

test-windows-x86-unit-sse3:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - sse3
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_sse3 build_windows_x86_gcc_sse3

test-windows-x86-unit-ssse3:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - ssse3
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_ssse3 build_windows_x86_gcc_ssse3

test-windows-x86-unit-sse4_1:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - sse4.1
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_sse4_1 build_windows_x86_gcc_sse4_1

test-windows-x86-unit-sse4_2:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_sse4_2 build_windows_x86_gcc_sse4_2

test-windows-x86-unit-avx:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - avx
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_avx build_windows_x86_gcc_avx

test-windows-x86-unit-avx2:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - avx2
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_avx2 build_windows_x86_gcc_avx2

test-windows-x86-unit-avx2-fma:
  stage: test
  rules:
    - if: $WIN_CI == "OFF"
      when: never
    - if: $WIN_CI == "ON"
      when: always
      allow_failure: false
  needs:
    - job: build-windows-x86-gcc
      artifacts: true
    - job: build-windows-x86-msvc
      artifacts: true
  tags:
    - x86_64
    - avx2
    - windows
  script:
    - ./ci/test-windows-unit.bat build_windows_x86_msvc_avx2_fma build_windows_x86_gcc_avx2_fma

# test-windows-x86-unit-avx512f:
#   stage: test
#   rules:
#     - if: $WIN_CI == "OFF"
#       when: never
#     - if: $WIN_CI == "ON"
#       when: always
#       allow_failure: false
#   dependencies:
#     - build-windows-x86-gcc
#     - build-windows-x86-msvc
#   tags:
#     - x86_64
#     - avx512f
#     - windows
#   script:
#     - ./ci/test-windows-unit.bat build_windows_x86_msvc_avx512f build_windows_x86_gcc_avx512f

# COVERAGE ------------------------------------------------------------------------------------------------------------

build-coverage-linux-x86-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage:v2.0
  stage: build
  needs: []
  tags:
    - x86_64
#   - avx512f
    - avx2
    - linux
    - docker
  artifacts:
    name: code-coverage-files
    when: always
    paths:
      - ./tests/code_coverage_files/*
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-coverage-linux-x86-gcc.sh

build-coverage-linux-armv7-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/armhf_ubuntu_coverage:v2.0
  stage: build
  needs: []
  tags:
    - armhf
    - neon
    - fma
    - linux
    - docker
  artifacts:
    name: code-coverage-files
    paths:
      - ./tests/code_coverage_files/*
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-coverage-linux-armv7-gcc.sh

build-coverage-linux-armv8-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/arm64_ubuntu_armie:v22.0
  stage: build
  needs: []
  tags:
    - arm64
    - neon
    - fma
    - linux
    - docker
  artifacts:
    name: code-coverage-files
    paths:
      - ./tests/code_coverage_files/*
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-coverage-linux-armv8-gcc.sh

coverage-linux:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage:v2.0
  stage: coverage
  needs:
    - job: build-coverage-linux-x86-gcc
      artifacts: true
    - job: build-coverage-linux-armv7-gcc
      artifacts: true
    - job: build-coverage-linux-armv8-gcc
      artifacts: true
  tags:
    - x86_64
    - linux
    - docker
  coverage: '/.*lines\.*: (\d+.\d+\%)/'
  artifacts:
     name: code-coverage-report
     paths:
      - ./tests/code_coverage_report/
  script:
    - ./ci/coverage-linux.sh

pages:
  stage: deploy
  tags:
    - linux
  needs:
    - job: coverage-linux
      artifacts: true
  script:
    - mv ./tests/code_coverage_report/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master